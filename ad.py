# -*- coding: utf-8 -*-
"""AD

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ukTRB1GN4AmbH-crM0hBGicBXFAbScpx
"""

#find if the length of the string is even print as even
string = "do what i say to world"
for word in string.split():
  if len(word) % 2 == 0:
    print(word)

#find if thr length of the string is even print as even
string = "do what i say to world"
for word in string.split():
  if len(word) % 1 == 0:
    print(word)
# find the length of the string if the length of the string is
# more than 3 print the first letter of the word   output:w

# convert string to list & first letter of string
string = "do what i say to world"
for word in string.split():
  if len(word) > 3:
    print(word[0])

string = "there is a string"
for word in string.split():
  if len(word)>3:
    print(word[0])

#find if thr lrngth of the string is even print as even
list = ["do what i say to world"]
for word in list[0].split():
  if len(word) % 2 == 0:
    print(word)

# converting String to list 7
#first letteer of string
string = "welcome to the python lab"
list1 = [i for i in string.split()]
print(list1)

# converting STring to list 7
#first letteer of string
# expected output:[to]
string = "welcome to the python lab"
list1 = [i for i in string.split()]
print(list1[1])

# converting String to list 7
#first letteer of string
# expected output : [to]
string = "welcome to the python lab"
list1 = [i for i in string.split() if len(i) == 2]
print(list1)

# converting STring to list 7
#first letteer of string
string = "welcome to the python lab"
list1 = [i for i in string.split() if len(i) > 3]
print(list1)

import numpy as np

arr = np.array([[1,2,3,4,5], [6,7,8,9,10],[2,12,23,10,89]])
print(arr)
print('0th element on 2nd row: ',arr[1,3])

import pandas as pd

import numpy as np

# Create sample dataset (House Price Dataset with missing values)

data = {

    'square_feet_area': [8500, 9600, np.nan, 11250, np.nan, 9550, 14260, np.nan, 13830, 11500],  # Numeric

    'Year_built': [2003, 1976, 2001, np.nan, 1998, 2000, 2006, 1978, 1950, np.nan],             # Numeric

    'over_all_condition': [5, 8, 6, 7, np.nan, 7, 8, 6, np.nan, 7],                            # Numeric

    'ready_to_move': ['Yes', 'No', 'NO', np.nan, 'No', np.nan, 'No', 'Yes', 'No', 'Yes'],     # Categorical (Yes/No)

    'Sale_price': [200000, 180000, 215000, 250000, 210000, 190000, 230000, 225000, 220000, 240000]  # Target Variable (Numeric)


}
df=pd.DataFrame(data)
# print original DataFrame
print("Original DataFrame:")
print(df)
#Replacing missing values with the mean for numeric colums
df['square_feet_area'].fillna(df['square_feet_area'].mean(), inplace=True)
df['Year_built'].fillna(df['Year_built'].mean(), inplace=True)
df['over_all_condition'].fillna(df['over_all_condition'].mean(), inplace=True)
#Replacing Missing Values with the Mode for Categorical Colums
df['ready_to_move'].fillna(df['ready_to_move'].mode()[0], inplace=True)

# print DataFrame after Imputation
print ("\nDataFrame after replacinf misiisng values with mean (for numeric) and mode (for categorical)")
print(df)

# block plot
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

data = {
    'semester':['Sem 1', 'Sem 2', 'Sem 3', 'Sem 4', 'Sem 1', 'Sem 2', 'Sem 3', 'Sem 4', 'Sem 1', 'Sem 2'],
    'hours_studied': [2, 9, 10, 4, 3, 9, 11, 7, 12, 5]
}

df = pd.DataFrame(data)

plt.figure(figsize=(4,2))
sns.boxplot(x='semester', y='hours_studied', data=df)
plt.title('Student Performance: Studied by Semester')
plt.xlabel('Semester')
plt.ylabel('Number of Hours Studied')

plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn asa sns

# Create a sample dataset with some outliers
np.random.seed(10)
data = pd.DataFrame({
    'value': np.concentrate([np.random.normal(0,1,100),np.random.normal(50,10,10)])
})
Q1 = data['value'].quantile(0.25)
Q3 = data['value'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers = data[(data['value'] < lower_bound) | (data['value'] > upper_bound)]

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

np.random.seed(10)
data = pd.DataFrame({
    'value': np.concatenate([np.random.normal(0, 1, 100), np.random.normal(10, 1, 10)])

})

Q1 = data['value'].quantile(0.25)
Q3 = data['value'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers = data[(data['value'] < lower_bound) | (data['value'] > upper_bound)]

print(f"Outliers baded on Box Plot criteria:\n{outliers}")

plt.figure(figsize=(12, 6))

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Simulated dataset
data = {
    'Steps': [5000, 3000, 8000, 2000, 7000, 1000, 6000, 9000, 1500, 2500],
    'Calories_Burned': [200, 150, 300, 100, 250, 50, 220, 330, 90, 120],
    'Sleep_Hours': [8, 7, 9, 6, 8, 5, 7, 9, 5, 6],
    'Health_Status': ['Healthy', 'Needs Attention', 'Healthy', 'Needs Attention',
                      'Healthy', 'Needs Attention', 'Healthy', 'Healthy',
                      'Needs Attention', 'Needs Attention']
}

# Create a DataFrame
df = pd.DataFrame(data)

# Convert categorical labels to numerical (Healthy=1, Needs Attention=0)
df['Health_Status'] = df['Health_Status'].map({'Healthy': 1, 'Needs Attention': 0})

# Features and target variable
X = df[['Steps', 'Calories_Burned', 'Sleep_Hours']]
y = df['Health_Status']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

# Predict health status for a new pet's data
new_pet_data = [[4000, 180, 7]]  # Example: [Steps, Calories_Burned, Sleep_Hours]
prediction = model.predict(new_pet_data)
status = "Healthy" if prediction[0] == 1 else "Needs Attention"
print(f"Predicted Health Status: {status}")

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
data={
    "age":[25,30,35,40,45],
    "height":[150,160,170,180,190],
    "weight":[50,60,70,80,90],

}
df=pd.DataFrame(data)
print("original dataframe:")
print(df)
scaler=MinMaxScaler()
normalized_data=scaler.fit_transform(df)
normalized_df=pd.DataFrame(normalized_data,columns=df.columns)
print("\nNormalized dataframe(scaled to range[0,1]):")
print(normalized_df)

import pandas as pd
from sklearn.preprocessing import StandardScaler
data={
    "age":[25,30,35,40,45],
    "height":[150,160,170,180,190],
    "weight":[50,60,70,80,90],

}
df=pd.DataFrame(data)
print("original dataframe:")
print(df)
scaler=StandardScaler()
standardized_data=scaler.fit_transform(df)
standardized_df=pd.DataFrame(standardized_data,columns=df.columns)
print("\nstandardized dataframe(scaled to range[0,1]):")
print(standardized_df)

import pandas as pd

# Step 2: Upload the CSV file

from google.colab import files

uploaded = files.upload()

# Step 3: Read the uploaded CSV file

# Replace 'your_file.csv' with the actual file name after upload

file_name = list(uploaded.keys())[0]  # Automatically gets the uploaded file name

df = pd.read_csv(file_name)

df.head()

df.shape

import seaborn as sns
sns.distplot(df['daily'])

import pandas as pd

# Step 2: Upload the CSV file

from google.colab import files

uploaded = files.upload()

# Step 3: Read the uploaded CSV file

# Replace 'your_file.csv' with the actual file name after upload

file_name = list(uploaded.keys())[0]  # Automatically gets the uploaded file name

df = pd.read_csv(file_name)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.graphics.regressionplots import influence_plot
import statsmodels.formula.api as smf
import numpy as np

df=pd.read_csv(file_name)
df

df.corr(numeric_only=True)

#build model
import statsmodels.formula.api as smf


model=smf.ols('MPG~WT+VOL+SP+HP',data=df).fit()

#add scatter plots for the above code
import matplotlib.pyplot as plt
plt.scatter(df['WT'],df['MPG'])
plt.scatter(df['VOL'],df['MPG'])
plt.scatter(df['SP'],df['MPG'])
plt.scatter(df['HP'],df['MPG'])

import statsmodels.formula.api as smf
model = smf.ols('MPG~WT+VOL+SP+HP',data=df).fit()

model.params

print(model.tvalues,'\n', model.pvalues)

(model.rsquared, model.rsquared_adj)

ml_w=smf.ols('MPG~WT', data = df).fit() # Change cars to df
print(ml_w.tvalues, '\n', ml_w.pvalues)

ml_wv=smf.ols('MPG~WT+VOL', data = df).fit() # Change cars to df
print(ml_w.tvalues, '\n', ml_w.pvalues)

(ml_wv.rsquared,ml_wv.rsquared_adj)

"""04-02-2025
calculating VIF
"""

rsq_hp = smf.ols('HP~WT+VOL+SP', data=df).fit().rsquared
vif_hp = 1/(1-rsq_hp)

rsq_wt = smf.ols('WT~HP+VOL+SP', data=df).fit().rsquared
vif_wt = 1/(1-rsq_wt)

rsq_vol = smf.ols('VOL~WT+SP+HP',data=df).fit().rsquared
vif_vol = 1/(1-rsq_vol)

rsq_sp = smf.ols('SP~WT+VOL+HP',data=df).fit().rsquared
vif_sp = 1/(1-rsq_sp)

d1 = {'Variables':['Hp','WT','VOL','SP'],'VIF':[vif_hp,vif_wt,vif_vol,vif_sp]}
Vif_frame = pd.DataFrame(d1)
Vif_frame

import statsmodels.api as sm
qqplot=sm.qqplot(model.resid,line='q')
plt.title("Normal Q-Q plot of residuals")
plt.show()

# RESIDUAL PLOT FOR HOMOSCEDASTICITY

def get_standardized_values( vals ):
  return (vals - vals.mean())/vals.std()

plt.scatter(get_standardized_values(model.fittedvalues),
            get_standardized_values(model.resid))
plt.title('Residual Plot')
plt.xlabel('Standardized Fitted Values')
plt.ylabel('Standardized Residuals')
plt.show()



"""Detecting influencers/outliers


Cooks Distance
"""

model_influence = model.get_influence()
(c, _) = model_influence.cooks_distance

fig = plt.subplots(figsize=(20, 7))
plt.stem(np.arange(len(df)), np.round(c, 3))
plt.xlabel('Row index')
plt.ylabel('Cooks Distance')
plt.show

